From zaimoni at zaimoni.com  Sat Jun 13 10:36:04 2009
From: zaimoni at zaimoni.com (Kenneth Boyd)
Date: Sat, 13 Jun 2009 03:36:04 -0500
Subject: [Zcplusplus-dev] Z.C++ status report: June 13, 2009
Message-ID: <4A3364F4.1040602@zaimoni.com>

To All Whom It May Concern,

Z.C++ is in stage 1 (New features, etc.).

Test case sets whose addition in the next week is plausible:
* zcc: error out on consecutive primitive types (blocking further 
implementation)
* z_cpp: reject define/undef of C++98 keywords in C++ mode (implementing 
C++0x here, C++98 would allow *if* no standard headers at all were included)
* z_cpp: in C99 mode, reject define of keywords followed by standard 
header; Accept define of keywords after all standard headers are included.

Test case sets that would be good to have in time for the Z.C++ 0.0.2 
release
* z_cpp: Spot checks of arithmetic corner cases.  This should at least 
cover the two's complement/one's complement/sign-magnitude axis and 
whether trap representations trap.
* z_cpp: Random test driver for arithmetic.
* tools subdirectory: Redundancy is good.  The Python helper scripts for 
automatically forking the test cases can use replicas in other scripting 
languages.

Informal target features for Z.C++ 0.0.2 that remain:
* Make INT_MIN work in integer constant expressions. (not easy, but 
relatively high priority)
* parse the typedefs in stddef.h/cstddef and stdint.h/cstdint .
* source-code reductions for some easy cases. sizeof operator and strlen 
function on string literals come to mind, but a systematic review is in 
order. (May reduce scope if schedule slides)
* handle target CHAR_BIT!= host CHAR_BIT (may ditch this if schedule slides)
* cross-platform floating point arithmetic emulation (may ditch this if 
schedule slides)

The following informal target features have been implemented:
* diagnose invalid STDC pragmas specified in C99

Feature creep is not scheduled yet.  Possible targets of feature creep 
include
* checking the incoming tokens to the INT.._C and UINT..._C macros in 
stdint.h/cstdint .  (The standards requires a single unsuffixed integer 
literal token.)  This would use a new ZCC pragma.

Best Regards,
Kenneth Boyd



From zaimoni at zaimoni.com  Sat Jun 20 23:55:55 2009
From: zaimoni at zaimoni.com (Kenneth Boyd)
Date: Sat, 20 Jun 2009 16:55:55 -0500
Subject: [Zcplusplus-dev] Z.C++ status report: June 20, 2009
Message-ID: <4A3D5AEB.8030106@zaimoni.com>

To All Whom It May Concern,

Z.C++ is in stage 1 (New features, etc.).

The following informal target features have been implemented:
* z_cpp: test case set for rejecting define/undef of C++98 keywords in 
C++ mode (implementing C++0x here, C++98 would allow *if* no standard 
headers at all were included)
* z_cpp: test case set for rejecting in C99 mode, reject define of 
keywords followed by standard header; Accept define of keywords after 
all standard headers are included.

The following changes are plausible for the next week:
* zcc: test cases for erroring out on consecutive primitive types
* Rewrite of type_spec in ParseTree.hpp to fully represent 
cv-qualification with n levels of pointer indirection.
* pseudorandom regression test driver framework (currently in research 
stage).

Copied from last week:
Test case sets that would be good to have in time for the Z.C++ 0.0.2 
release
* z_cpp: Spot checks of arithmetic corner cases. This should at least 
cover the two's complement/one's complement/sign-magnitude axis and 
whether trap representations trap.
* z_cpp: Random test driver for arithmetic.
* tools subdirectory: Redundancy is good. The Python helper scripts for 
automatically forking the test cases can use replicas in other scripting 
languages.

Informal target features for Z.C++ 0.0.2 that remain:
* Make INT_MIN work in integer constant expressions. (not easy, but 
relatively high priority; requires pseudorandom regression test driver)
* parse the typedefs in stddef.h/cstddef and stdint.h/cstdint .
* source-code reductions for some easy cases. sizeof operator and strlen 
function on string literals come to mind, but a systematic review is in 
order. (May reduce scope if schedule slides)
* handle target CHAR_BIT!= host CHAR_BIT (may ditch this if schedule 
slides)
* cross-platform floating point arithmetic emulation (may ditch this if 
schedule slides)

The following informal target features have been implemented:
* diagnose invalid STDC pragmas specified in C99

Feature creep is not scheduled yet. Possible targets of feature creep 
include
* checking the incoming tokens to the INT.._C and UINT..._C macros in 
stdint.h/cstdint . (The standards requires a single unsuffixed integer 
literal token.) This would use a new ZCC pragma.

Best Regards,
Kenneth Boyd

P.S.: Prior art for the pseudorandom regression test driver framework 
includes:
* Bryan Turner's optimization tester [ 
http://brturn.googlepages.com/randomcprogramgenerator ]
* Eric Eide's and John Regehr's volatile tester [ 
http://www.cs.utah.edu/%7Eeeide/emsoft08/ ]
* Christian Lindig's Quest Tester for function call interfaces [ 
http://code.google.com/p/quest-tester/ ]



From zaimoni at zaimoni.com  Sun Jun 28 19:33:14 2009
From: zaimoni at zaimoni.com (Kenneth Boyd)
Date: Sun, 28 Jun 2009 12:33:14 -0500
Subject: [Zcplusplus-dev] Z.C++ status report: June 28, 2009
In-Reply-To: <4A3D5AEB.8030106@zaimoni.com>
References: <4A3D5AEB.8030106@zaimoni.com>
Message-ID: <4A47A95A.20303@zaimoni.com>

To All Whom It May Concern,

Z.C++ is in stage 1 (New features, etc.).

The following informal target features have been implemented:
* Rewrite of type_spec in ParseTree.hpp to fully represent 
cv-qualification with n levels of pointer indirection.

Copied from last week:
The following changes are plausible for the next week:
* zcc: test cases for erroring out on consecutive primitive types
* pseudorandom regression test driver framework (currently in research 
stage).

Test case sets that would be good to have in time for the Z.C++ 0.0.2 
release
* z_cpp: Spot checks of arithmetic corner cases. This should at least 
cover the two's complement/one's complement/sign-magnitude axis and 
whether trap representations trap.
* z_cpp: Random test driver for arithmetic.
* tools subdirectory: Redundancy is good. The Python helper scripts for 
automatically forking the test cases can use replicas in other scripting 
languages.

Informal target features for Z.C++ 0.0.2 that remain:
* Make INT_MIN work in integer constant expressions. (not easy, but 
relatively high priority; requires pseudorandom regression test driver)
* parse the typedefs in stddef.h/cstddef and stdint.h/cstdint .
* source-code reductions for some easy cases. sizeof operator and strlen 
function on string literals come to mind, but a systematic review is in 
order. (May reduce scope if schedule slides)
* handle target CHAR_BIT!= host CHAR_BIT (may ditch this if schedule 
slides)
* cross-platform floating point arithmetic emulation (may ditch this if 
schedule slides)

Feature creep is not scheduled yet. Possible targets of feature creep 
include
* checking the incoming tokens to the INT.._C and UINT..._C macros in 
stdint.h/cstdint . (The standards requires a single unsuffixed integer 
literal token.) This would use a new ZCC pragma.

Best Regards,
Kenneth Boyd




