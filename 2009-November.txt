From zaimoni at zaimoni.com  Mon Nov 23 10:11:30 2009
From: zaimoni at zaimoni.com (Kenneth Boyd)
Date: Mon, 23 Nov 2009 03:11:30 -0600
Subject: [Zcplusplus-dev]  Z.C++ status report: November 23, 2009
In-Reply-To: <4AB5C314.7060303@zaimoni.com>
References: <4A3D5AEB.8030106@zaimoni.com>	<4A629734.2050700@zaimoni.com>	<4A8DB4CD.3080109@zaimoni.com>	<4AA1E66E.4050203@zaimoni.com>
	<4AB5C314.7060303@zaimoni.com>
Message-ID: <4B0A51C2.3020501@zaimoni.com>

To All Whom It May Concern,

Z.C++ is now in stage one (new features).  I don't expect it to stay in that stage much longer, but having been AWOL for about a month, odds are that fitting in enough features to justify Z.C++ 0.0.3 is going to slow things down (looking at late Dec. 2009 rather than early Dec. 2009 right now).

Preliminary recognition (but not parsing) of definitions for struct/union/class is in, as are static assertions.  Similar functionality for enum is waiting on the results of an inquiry at comp.std.c++ to confirm/refute my reading of the C++ standards.

Commentary below assumes only one developer:

It seems unlikely that function declaration parsing is going to make it into Z.C++ 0.0.3.

The following features are still possible for Z.C++ 0.0.3
* The __COUNTER__ macro extension is supported by all of GCC, CLang, and 
MSVC.
* The __INCLUDE_LEVEL__ macro extension is supported by GCC and CLang.
* The __TIMESTAMP__ macro extension is supported by all of GCC, CLang, 
and MSVC.
* CLang has __has_builtin and __has_feature "magic macros".
* enum definitions.

The following testing feature is still possible for Z.C++ 0.0.3
* tools subdirectory: Redundancy is good. The Python helper scripts for 
automatically forking the test cases can use replicas in other scripting 
languages.  [Note: primary_type_error_gen.py is dangerously close to obsolete, 
and may end up in the freezer instead.]


The following features definitely will not make it into Z.C++ 0.0.3

* Source-code reductions for some easy cases. sizeof operator and strlen 
function on string literals come to mind, but a systematic review is in 
order.
* Checking the incoming tokens to the INT.._C and UINT..._C macros in 
stdint.h/cstdint . (The standards requires a single unsuffixed integer 
literal token.) This would use a new ZCC pragma.
* Handle target CHAR_BIT!= host CHAR_BIT
* Cross-platform floating point arithmetic emulation (this is starting 
to look ugly, as comp.lang.fortran suggests there's quite a bit of 
hardware out there that isn't even remotely close to IEEE)

The following test case sets definitely will not make it into Z.C++ 0.0.3

* z_cpp: Random test driver for arithmetic.
* pseudorandom regression test driver framework (currently in research 
stage).

Feature creep is ruled out: the following are going to have to wait.

* starting work on Fortran 66 support
* Build a catalog of exotic hardware features to handle.
* build in ISO mode (required for MSVC support)

Best Regards,
Kenneth Boyd



From zaimoni at zaimoni.com  Tue Nov 24 08:05:57 2009
From: zaimoni at zaimoni.com (Kenneth Boyd)
Date: Tue, 24 Nov 2009 01:05:57 -0600
Subject: [Zcplusplus-dev] Z.C++ status report: November 23, 2009
In-Reply-To: <4B0A51C2.3020501@zaimoni.com>
References: <4A3D5AEB.8030106@zaimoni.com>	<4A629734.2050700@zaimoni.com>	<4A8DB4CD.3080109@zaimoni.com>	<4AA1E66E.4050203@zaimoni.com>	<4AB5C314.7060303@zaimoni.com>
	<4B0A51C2.3020501@zaimoni.com>
Message-ID: <4B0B85D5.9010606@zaimoni.com>

Kenneth Boyd wrote:
> To All Whom It May Concern,
> ....
> The following features are still possible for Z.C++ 0.0.3
> * The __COUNTER__ macro extension is supported by all of GCC, CLang, and 
> MSVC.
> * The __INCLUDE_LEVEL__ macro extension is supported by GCC and CLang.
> * The __TIMESTAMP__ macro extension is supported by all of GCC, CLang, 
> and MSVC.
> * CLang has __has_builtin and __has_feature "magic macros".
> * enum definitions.
>   
Embarrassing...turns out __COUNTER__, __INCLUDE_LEVEL__, and 
__TIMESTAMP__ are already implemented.

This should read:

The following features are still possible for Z.C++ 0.0.3
* CLang has __has_builtin and __has_feature "magic macros".
* enum definitions.

Note that CLang now has __has_include and __has_include_next "magic macros" that are also interesting.

Best Regards,
Kenneth Boyd




