From zaimoni at zaimoni.com  Sun Jul 19 05:47:00 2009
From: zaimoni at zaimoni.com (Kenneth Boyd)
Date: Sat, 18 Jul 2009 22:47:00 -0500
Subject: [Zcplusplus-dev] Z.C++ status report: July 18, 2009
In-Reply-To: <4A3D5AEB.8030106@zaimoni.com>
References: <4A3D5AEB.8030106@zaimoni.com>
Message-ID: <4A629734.2050700@zaimoni.com>

To All Whom It May Concern,

Z.C++ is in stage 1 (New features, etc.)

The following informal target features have been implemented:
* Rewrite of type_spec in ParseTree.hpp to fully represent 
cv-qualification with n levels of pointer indirection.
* Proper parsing of typedefs of simple types (no pointers, function 
types, etc.)  This fulfils parsing the typedefs in stddef.h/cstddef and 
stdint.h/cstdint .

The following changes are plausible for the next week
* Test cases and elementary errors/warnings for simple declarations and 
typedefs.
* Start test case sets for preprocessor arithmetic targeting 
no-padding-bits platforms (need six sets: axis trapping/no-trapping 
integer math, and axis two's complement/one's complement/sign-magnitude 
signed integers)

Mostly copied from four weeks ago:
Test case sets that would be good to have in time for the Z.C++ 0.0.2 
release
* z_cpp: Spot checks of arithmetic corner cases. This should at least 
cover the two's complement/one's complement/sign-magnitude axis and 
whether trap representations trap.
* z_cpp: Random test driver for arithmetic.
* pseudorandom regression test driver framework (currently in research 
stage).
* tools subdirectory: Redundancy is good. The Python helper scripts for 
automatically forking the test cases can use replicas in other scripting 
languages.

Informal target features for Z.C++ 0.0.2 that remain:
* Make INT_MIN work in integer constant expressions. (not easy, but 
relatively high priority; requires pseudorandom regression test driver)
* source-code reductions for some easy cases. sizeof operator and strlen 
function on string literals come to mind, but a systematic review is in 
order. (May reduce scope if schedule slides)
* handle target CHAR_BIT!= host CHAR_BIT (may ditch this if schedule slides)
* cross-platform floating point arithmetic emulation (may ditch this if 
schedule slides)

Feature creep is not scheduled yet. Possible targets of feature creep 
include
* checking the incoming tokens to the INT.._C and UINT..._C macros in 
stdint.h/cstdint . (The standards requires a single unsuffixed integer 
literal token.) This would use a new ZCC pragma.
* starting work on Fortran 66 support.  (Why Fortran 66?  To make it 
easier to understand where Fortran 77 is coming from.)
* Build a catalog of exotic hardware features to handle in z_cpp.

Best Regards,
Kenneth Boyd




